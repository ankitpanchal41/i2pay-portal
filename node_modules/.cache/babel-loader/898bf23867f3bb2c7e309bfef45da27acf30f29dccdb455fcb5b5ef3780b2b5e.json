{"ast":null,"code":"import { all, fork, put, takeEvery, call } from \"redux-saga/effects\";\nimport { ADD_IP_WHITELIST_REQUEST, ADD_IP_WHITELIST_RESPONSE, DELETE_IP_WHITELIST_REQUEST, DELETE_IP_WHITELIST_RESPONSE, GET_IP_WHITELIST_REQUEST, GET_IP_WHITELIST_RESPONSE, UPDATE_IP_WHITELIST_REQUEST, UPDATE_IP_WHITELIST_RESPONSE, DETAIL_IP_WHITELIST_REQUEST, DETAIL_IP_WHITELIST_RESPONSE } from \"../actions/IPWhitelist\";\nimport { addIPWhitelistData, deleteIPWhitelistData, getIPWhitelistData, updateIpWhitelistData, detailIpWhitelistData } from \"../services/IPWhiteList\";\nfunction* getIPWhitelistSaga(data) {\n  try {\n    const result = yield call(getIPWhitelistData, data);\n    if (result.responseCode === 200) {\n      yield put({\n        type: GET_IP_WHITELIST_RESPONSE,\n        payload: {\n          ipWhitelist: result.data,\n          paginate: result === null || result === void 0 ? void 0 : result.paginate\n        }\n      });\n    }\n  } catch (error) {} finally {\n    data === null || data === void 0 ? void 0 : data.callback();\n  }\n}\nfunction* addIPWhitelistSaga(action) {\n  try {\n    const result = yield call(addIPWhitelistData, action.payload);\n    if ((result === null || result === void 0 ? void 0 : result.responseCode) === 200) {\n      yield put({\n        type: ADD_IP_WHITELIST_RESPONSE,\n        data: result\n      });\n      action.navigateState();\n    }\n  } catch (error) {} finally {\n    action.callBack();\n  }\n}\nfunction* deleteIPWhitelistSaga(action) {\n  try {\n    const result = yield call(deleteIPWhitelistData, action.payload);\n    if ((result === null || result === void 0 ? void 0 : result.responseCode) === 200) {\n      var _action$payload;\n      yield put({\n        type: DELETE_IP_WHITELIST_RESPONSE,\n        data: result,\n        id: action === null || action === void 0 ? void 0 : (_action$payload = action.payload) === null || _action$payload === void 0 ? void 0 : _action$payload.id\n      });\n    }\n  } catch (error) {} finally {\n    action.callBack();\n  }\n}\nexport function* updateIpWhitelistSaga(action) {\n  try {\n    const result = yield call(updateIpWhitelistData, action.payload);\n    if ((result === null || result === void 0 ? void 0 : result.responseCode) === 200) {\n      yield put({\n        type: UPDATE_IP_WHITELIST_RESPONSE,\n        data: result\n      });\n      action.navigateState();\n    }\n  } catch (error) {} finally {\n    action.callBack();\n  }\n}\nfunction* detailIpWhitelistSaga(action) {\n  try {\n    const result = yield call(detailIpWhitelistData, action.payload);\n    if (result === 404 && action.navigateListing) {\n      action.navigateListing();\n      return false;\n    }\n    if ((result === null || result === void 0 ? void 0 : result.responseCode) === 200) {\n      yield put({\n        type: DETAIL_IP_WHITELIST_RESPONSE,\n        data: result\n      });\n    }\n  } catch (error) {} finally {\n    action.callBack();\n  }\n}\nfunction* watchIPWhiteListSaga() {\n  yield takeEvery(GET_IP_WHITELIST_REQUEST, getIPWhitelistSaga);\n  yield takeEvery(ADD_IP_WHITELIST_REQUEST, addIPWhitelistSaga);\n  yield takeEvery(DELETE_IP_WHITELIST_REQUEST, deleteIPWhitelistSaga);\n  yield takeEvery(UPDATE_IP_WHITELIST_REQUEST, updateIpWhitelistSaga);\n  yield takeEvery(DETAIL_IP_WHITELIST_REQUEST, detailIpWhitelistSaga);\n}\nexport default function* rootSaga() {\n  yield all([fork(watchIPWhiteListSaga)]);\n}","map":{"version":3,"names":["all","fork","put","takeEvery","call","ADD_IP_WHITELIST_REQUEST","ADD_IP_WHITELIST_RESPONSE","DELETE_IP_WHITELIST_REQUEST","DELETE_IP_WHITELIST_RESPONSE","GET_IP_WHITELIST_REQUEST","GET_IP_WHITELIST_RESPONSE","UPDATE_IP_WHITELIST_REQUEST","UPDATE_IP_WHITELIST_RESPONSE","DETAIL_IP_WHITELIST_REQUEST","DETAIL_IP_WHITELIST_RESPONSE","addIPWhitelistData","deleteIPWhitelistData","getIPWhitelistData","updateIpWhitelistData","detailIpWhitelistData","getIPWhitelistSaga","data","result","responseCode","type","payload","ipWhitelist","paginate","error","callback","addIPWhitelistSaga","action","navigateState","callBack","deleteIPWhitelistSaga","_action$payload","id","updateIpWhitelistSaga","detailIpWhitelistSaga","navigateListing","watchIPWhiteListSaga","rootSaga"],"sources":["/var/www/html/i2pay-portal/src/app/redux/sagas/IPWhiteList.js"],"sourcesContent":["import { all, fork, put, takeEvery, call } from \"redux-saga/effects\";\n\nimport {\n    ADD_IP_WHITELIST_REQUEST,\n    ADD_IP_WHITELIST_RESPONSE,\n    DELETE_IP_WHITELIST_REQUEST,\n    DELETE_IP_WHITELIST_RESPONSE,\n    GET_IP_WHITELIST_REQUEST,\n    GET_IP_WHITELIST_RESPONSE,\n    UPDATE_IP_WHITELIST_REQUEST,\n    UPDATE_IP_WHITELIST_RESPONSE,\n    DETAIL_IP_WHITELIST_REQUEST,\n    DETAIL_IP_WHITELIST_RESPONSE,\n} from \"../actions/IPWhitelist\";\nimport {\n    addIPWhitelistData,\n    deleteIPWhitelistData,\n    getIPWhitelistData,\n    updateIpWhitelistData,\n    detailIpWhitelistData,\n} from \"../services/IPWhiteList\";\n\nfunction* getIPWhitelistSaga(data) {\n    try {\n        const result = yield call(getIPWhitelistData, data);\n        if (result.responseCode === 200) {\n            yield put({\n                type: GET_IP_WHITELIST_RESPONSE,\n                payload: { ipWhitelist: result.data, paginate: result?.paginate },\n            });\n        }\n    } catch (error) {\n    } finally {\n        data?.callback();\n    }\n}\n\nfunction* addIPWhitelistSaga(action) {\n    try {\n        const result = yield call(addIPWhitelistData, action.payload);\n        if (result?.responseCode === 200) {\n            yield put({\n                type: ADD_IP_WHITELIST_RESPONSE,\n                data: result,\n            });\n            action.navigateState();\n        }\n    } catch (error) {\n    } finally {\n        action.callBack();\n    }\n}\n\nfunction* deleteIPWhitelistSaga(action) {\n    try {\n        const result = yield call(deleteIPWhitelistData, action.payload);\n        if (result?.responseCode === 200) {\n            yield put({\n                type: DELETE_IP_WHITELIST_RESPONSE,\n                data: result,\n                id: action?.payload?.id,\n            });\n        }\n    } catch (error) {\n    } finally {\n        action.callBack();\n    }\n}\n\nexport function* updateIpWhitelistSaga(action) {\n    try {\n        const result = yield call(updateIpWhitelistData, action.payload);\n        if (result?.responseCode === 200) {\n            yield put({\n                type: UPDATE_IP_WHITELIST_RESPONSE,\n                data: result,\n            });\n            action.navigateState();\n        }\n    } catch (error) {\n    } finally {\n        action.callBack();\n    }\n}\n\nfunction* detailIpWhitelistSaga(action) {\n    try {\n        const result = yield call(detailIpWhitelistData, action.payload);\n\n        if (result === 404 && action.navigateListing) {\n            action.navigateListing();\n            return false;\n        }\n\n        if (result?.responseCode === 200) {\n            yield put({\n                type: DETAIL_IP_WHITELIST_RESPONSE,\n                data: result,\n            });\n        }\n    } catch (error) {\n    } finally {\n        action.callBack();\n    }\n}\n\nfunction* watchIPWhiteListSaga() {\n    yield takeEvery(GET_IP_WHITELIST_REQUEST, getIPWhitelistSaga);\n    yield takeEvery(ADD_IP_WHITELIST_REQUEST, addIPWhitelistSaga);\n    yield takeEvery(DELETE_IP_WHITELIST_REQUEST, deleteIPWhitelistSaga);\n    yield takeEvery(UPDATE_IP_WHITELIST_REQUEST, updateIpWhitelistSaga);\n    yield takeEvery(DETAIL_IP_WHITELIST_REQUEST, detailIpWhitelistSaga);\n}\n\nexport default function* rootSaga() {\n    yield all([fork(watchIPWhiteListSaga)]);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}