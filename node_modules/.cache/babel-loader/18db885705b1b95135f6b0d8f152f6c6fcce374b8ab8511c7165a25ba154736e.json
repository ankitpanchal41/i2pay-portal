{"ast":null,"code":"import { all, fork, put, takeEvery, call } from \"redux-saga/effects\";\nimport { DELETE_NOTIFICATION_REQUEST, DELETE_NOTIFICATION_RESPONSE, GET_NOTIFICATION_REQUEST, GET_NOTIFICATION_RESPONSE } from \"../actions/Notification\";\nimport { deleteNotificationData, getNotificationData } from \"../services/Notification\";\nfunction* getNotificationSaga(data) {\n  try {\n    const result = yield call(getNotificationData, data);\n    if (result.responseCode === 200) {\n      yield put({\n        type: GET_NOTIFICATION_RESPONSE,\n        payload: {\n          notificationList: result.data,\n          paginate: result === null || result === void 0 ? void 0 : result.paginate\n        }\n      });\n    }\n  } catch (error) {} finally {\n    data === null || data === void 0 ? void 0 : data.callback();\n  }\n}\nfunction* deleteNotificationSaga(action) {\n  try {\n    const result = yield call(deleteNotificationData, action.payload);\n    if ((result === null || result === void 0 ? void 0 : result.responseCode) === 200) {\n      var _action$payload;\n      yield put({\n        type: DELETE_NOTIFICATION_RESPONSE,\n        data: result,\n        id: action === null || action === void 0 ? void 0 : (_action$payload = action.payload) === null || _action$payload === void 0 ? void 0 : _action$payload.id\n      });\n    }\n  } catch (error) {} finally {\n    action.callBack();\n  }\n}\nfunction* watchNotificationSaga() {\n  yield takeEvery(GET_NOTIFICATION_REQUEST, getNotificationSaga);\n  yield takeEvery(DELETE_NOTIFICATION_REQUEST, deleteNotificationSaga);\n}\nexport default function* rootSaga() {\n  yield all([fork(watchNotificationSaga)]);\n}","map":{"version":3,"names":["all","fork","put","takeEvery","call","DELETE_NOTIFICATION_REQUEST","DELETE_NOTIFICATION_RESPONSE","GET_NOTIFICATION_REQUEST","GET_NOTIFICATION_RESPONSE","deleteNotificationData","getNotificationData","getNotificationSaga","data","result","responseCode","type","payload","notificationList","paginate","error","callback","deleteNotificationSaga","action","_action$payload","id","callBack","watchNotificationSaga","rootSaga"],"sources":["/var/www/html/i2pay-portal/src/app/redux/sagas/Notification.js"],"sourcesContent":["import { all, fork, put, takeEvery, call } from \"redux-saga/effects\";\n\nimport {\n    DELETE_NOTIFICATION_REQUEST,\n    DELETE_NOTIFICATION_RESPONSE,\n    GET_NOTIFICATION_REQUEST,\n    GET_NOTIFICATION_RESPONSE,\n} from \"../actions/Notification\";\nimport { deleteNotificationData, getNotificationData } from \"../services/Notification\";\n\nfunction* getNotificationSaga(data) {\n    try {\n        const result = yield call(getNotificationData, data);\n        if (result.responseCode === 200) {\n            yield put({\n                type: GET_NOTIFICATION_RESPONSE,\n                payload: { notificationList: result.data, paginate: result?.paginate },\n            });\n        }\n    } catch (error) {\n    } finally {\n        data?.callback();\n    }\n}\n\nfunction* deleteNotificationSaga(action) {\n    try {\n        const result = yield call(deleteNotificationData, action.payload);\n        if (result?.responseCode === 200) {\n            yield put({\n                type: DELETE_NOTIFICATION_RESPONSE,\n                data: result,\n                id: action?.payload?.id,\n            });\n        }\n    } catch (error) {\n    } finally {\n        action.callBack();\n    }\n}\n\nfunction* watchNotificationSaga() {\n    yield takeEvery(GET_NOTIFICATION_REQUEST, getNotificationSaga);\n    yield takeEvery(DELETE_NOTIFICATION_REQUEST, deleteNotificationSaga);\n}\n\nexport default function* rootSaga() {\n    yield all([fork(watchNotificationSaga)]);\n}\n"],"mappings":"AAAA,SAASA,GAAG,EAAEC,IAAI,EAAEC,GAAG,EAAEC,SAAS,EAAEC,IAAI,QAAQ,oBAAoB;AAEpE,SACIC,2BAA2B,EAC3BC,4BAA4B,EAC5BC,wBAAwB,EACxBC,yBAAyB,QACtB,yBAAyB;AAChC,SAASC,sBAAsB,EAAEC,mBAAmB,QAAQ,0BAA0B;AAEtF,UAAUC,mBAAmBA,CAACC,IAAI,EAAE;EAChC,IAAI;IACA,MAAMC,MAAM,GAAG,MAAMT,IAAI,CAACM,mBAAmB,EAAEE,IAAI,CAAC;IACpD,IAAIC,MAAM,CAACC,YAAY,KAAK,GAAG,EAAE;MAC7B,MAAMZ,GAAG,CAAC;QACNa,IAAI,EAAEP,yBAAyB;QAC/BQ,OAAO,EAAE;UAAEC,gBAAgB,EAAEJ,MAAM,CAACD,IAAI;UAAEM,QAAQ,EAAEL,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAEK;QAAS;MACzE,CAAC,CAAC;IACN;EACJ,CAAC,CAAC,OAAOC,KAAK,EAAE,CAChB,CAAC,SAAS;IACNP,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEQ,QAAQ,CAAC,CAAC;EACpB;AACJ;AAEA,UAAUC,sBAAsBA,CAACC,MAAM,EAAE;EACrC,IAAI;IACA,MAAMT,MAAM,GAAG,MAAMT,IAAI,CAACK,sBAAsB,EAAEa,MAAM,CAACN,OAAO,CAAC;IACjE,IAAI,CAAAH,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAEC,YAAY,MAAK,GAAG,EAAE;MAAA,IAAAS,eAAA;MAC9B,MAAMrB,GAAG,CAAC;QACNa,IAAI,EAAET,4BAA4B;QAClCM,IAAI,EAAEC,MAAM;QACZW,EAAE,EAAEF,MAAM,aAANA,MAAM,wBAAAC,eAAA,GAAND,MAAM,CAAEN,OAAO,cAAAO,eAAA,uBAAfA,eAAA,CAAiBC;MACzB,CAAC,CAAC;IACN;EACJ,CAAC,CAAC,OAAOL,KAAK,EAAE,CAChB,CAAC,SAAS;IACNG,MAAM,CAACG,QAAQ,CAAC,CAAC;EACrB;AACJ;AAEA,UAAUC,qBAAqBA,CAAA,EAAG;EAC9B,MAAMvB,SAAS,CAACI,wBAAwB,EAAEI,mBAAmB,CAAC;EAC9D,MAAMR,SAAS,CAACE,2BAA2B,EAAEgB,sBAAsB,CAAC;AACxE;AAEA,eAAe,UAAUM,QAAQA,CAAA,EAAG;EAChC,MAAM3B,GAAG,CAAC,CAACC,IAAI,CAACyB,qBAAqB,CAAC,CAAC,CAAC;AAC5C"},"metadata":{},"sourceType":"module","externalDependencies":[]}