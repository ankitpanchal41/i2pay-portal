{"ast":null,"code":"import { createStore, applyMiddleware, compose } from \"redux\";\nimport createSagaMiddleware from \"redux-saga\";\nimport { persistStore, persistReducer } from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\";\nimport sagas from \"../sagas\";\nimport rootReducer from \"../reducers\";\n\n// Add name of reducers to whitelist array to persist that reducer to local storage\nconst persistConfig = {\n  key: \"root\",\n  storage: storage,\n  whitelist: [\"persist\"]\n};\n\n// initiate saga middleware and supply to middleware array\nconst sagaMiddleware = createSagaMiddleware();\nconst middleware = [sagaMiddleware];\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\nexport const store = createStore(persistedReducer, compose(applyMiddleware(...middleware)));\n\n// run saga middleware to watch for action dispatches\nsagaMiddleware.run(sagas);\nexport const persistor = persistStore(store);","map":{"version":3,"names":["createStore","applyMiddleware","compose","createSagaMiddleware","persistStore","persistReducer","storage","sagas","rootReducer","persistConfig","key","whitelist","sagaMiddleware","middleware","persistedReducer","store","run","persistor"],"sources":["/var/www/html/i2pay-portal/src/app/redux/store/index.js"],"sourcesContent":["import { createStore, applyMiddleware, compose } from \"redux\";\nimport createSagaMiddleware from \"redux-saga\";\nimport { persistStore, persistReducer } from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\";\n\nimport sagas from \"../sagas\";\nimport rootReducer from \"../reducers\";\n\n// Add name of reducers to whitelist array to persist that reducer to local storage\nconst persistConfig = {\n    key: \"root\",\n    storage: storage,\n    whitelist: [\"persist\"],\n};\n\n// initiate saga middleware and supply to middleware array\nconst sagaMiddleware = createSagaMiddleware();\nconst middleware = [sagaMiddleware];\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\nexport const store = createStore(persistedReducer, compose(applyMiddleware(...middleware)));\n\n// run saga middleware to watch for action dispatches\nsagaMiddleware.run(sagas);\n\nexport const persistor = persistStore(store);\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,eAAe,EAAEC,OAAO,QAAQ,OAAO;AAC7D,OAAOC,oBAAoB,MAAM,YAAY;AAC7C,SAASC,YAAY,EAAEC,cAAc,QAAQ,eAAe;AAC5D,OAAOC,OAAO,MAAM,2BAA2B;AAE/C,OAAOC,KAAK,MAAM,UAAU;AAC5B,OAAOC,WAAW,MAAM,aAAa;;AAErC;AACA,MAAMC,aAAa,GAAG;EAClBC,GAAG,EAAE,MAAM;EACXJ,OAAO,EAAEA,OAAO;EAChBK,SAAS,EAAE,CAAC,SAAS;AACzB,CAAC;;AAED;AACA,MAAMC,cAAc,GAAGT,oBAAoB,CAAC,CAAC;AAC7C,MAAMU,UAAU,GAAG,CAACD,cAAc,CAAC;AAEnC,MAAME,gBAAgB,GAAGT,cAAc,CAACI,aAAa,EAAED,WAAW,CAAC;AAEnE,OAAO,MAAMO,KAAK,GAAGf,WAAW,CAACc,gBAAgB,EAAEZ,OAAO,CAACD,eAAe,CAAC,GAAGY,UAAU,CAAC,CAAC,CAAC;;AAE3F;AACAD,cAAc,CAACI,GAAG,CAACT,KAAK,CAAC;AAEzB,OAAO,MAAMU,SAAS,GAAGb,YAAY,CAACW,KAAK,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}