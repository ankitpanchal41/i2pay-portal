{"ast":null,"code":"import { all, fork, put, takeEvery, call } from \"redux-saga/effects\";\nimport { uploadAgreement } from \"../services/Agreement\";\nimport { UPLOAD_AGREEMENT_REQUEST, UPLOAD_AGREEMENT_RESPONSE } from \"../actions/AgreementAction\";\nfunction* uploadAgreementSaga(action) {\n  try {\n    const result = yield call(uploadAgreement, action.payload);\n    if ((result === null || result === void 0 ? void 0 : result.responseCode) === 200) {\n      yield put({\n        type: UPLOAD_AGREEMENT_RESPONSE,\n        data: result\n      });\n      action === null || action === void 0 ? void 0 : action.navigateState();\n      action.callBack(\"success\");\n    }\n  } catch (error) {} finally {\n    action.callBack(\"reuploaded\");\n  }\n}\nfunction* watchSetAgreementSaga() {\n  yield takeEvery(UPLOAD_AGREEMENT_REQUEST, uploadAgreementSaga);\n}\nexport default function* rootSaga() {\n  yield all([fork(watchSetAgreementSaga)]);\n}","map":{"version":3,"names":["all","fork","put","takeEvery","call","uploadAgreement","UPLOAD_AGREEMENT_REQUEST","UPLOAD_AGREEMENT_RESPONSE","uploadAgreementSaga","action","result","payload","responseCode","type","data","navigateState","callBack","error","watchSetAgreementSaga","rootSaga"],"sources":["/var/www/html/i2pay-portal/src/app/redux/sagas/Agreement.js"],"sourcesContent":["import { all, fork, put, takeEvery, call } from \"redux-saga/effects\";\nimport { uploadAgreement } from \"../services/Agreement\";\nimport { UPLOAD_AGREEMENT_REQUEST, UPLOAD_AGREEMENT_RESPONSE } from \"../actions/AgreementAction\";\n\nfunction* uploadAgreementSaga(action) {\n    try {\n        const result = yield call(uploadAgreement, action.payload);\n        if (result?.responseCode === 200) {\n            yield put({\n                type: UPLOAD_AGREEMENT_RESPONSE,\n                data: result,\n            });\n            action?.navigateState();\n            action.callBack(\"success\");\n        }\n    } catch (error) {\n    } finally {\n        action.callBack(\"reuploaded\");\n    }\n}\n\nfunction* watchSetAgreementSaga() {\n    yield takeEvery(UPLOAD_AGREEMENT_REQUEST, uploadAgreementSaga);\n}\n\nexport default function* rootSaga() {\n    yield all([fork(watchSetAgreementSaga)]);\n}\n"],"mappings":"AAAA,SAASA,GAAG,EAAEC,IAAI,EAAEC,GAAG,EAAEC,SAAS,EAAEC,IAAI,QAAQ,oBAAoB;AACpE,SAASC,eAAe,QAAQ,uBAAuB;AACvD,SAASC,wBAAwB,EAAEC,yBAAyB,QAAQ,4BAA4B;AAEhG,UAAUC,mBAAmBA,CAACC,MAAM,EAAE;EAClC,IAAI;IACA,MAAMC,MAAM,GAAG,MAAMN,IAAI,CAACC,eAAe,EAAEI,MAAM,CAACE,OAAO,CAAC;IAC1D,IAAI,CAAAD,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAEE,YAAY,MAAK,GAAG,EAAE;MAC9B,MAAMV,GAAG,CAAC;QACNW,IAAI,EAAEN,yBAAyB;QAC/BO,IAAI,EAAEJ;MACV,CAAC,CAAC;MACFD,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAEM,aAAa,CAAC,CAAC;MACvBN,MAAM,CAACO,QAAQ,CAAC,SAAS,CAAC;IAC9B;EACJ,CAAC,CAAC,OAAOC,KAAK,EAAE,CAChB,CAAC,SAAS;IACNR,MAAM,CAACO,QAAQ,CAAC,YAAY,CAAC;EACjC;AACJ;AAEA,UAAUE,qBAAqBA,CAAA,EAAG;EAC9B,MAAMf,SAAS,CAACG,wBAAwB,EAAEE,mBAAmB,CAAC;AAClE;AAEA,eAAe,UAAUW,QAAQA,CAAA,EAAG;EAChC,MAAMnB,GAAG,CAAC,CAACC,IAAI,CAACiB,qBAAqB,CAAC,CAAC,CAAC;AAC5C"},"metadata":{},"sourceType":"module","externalDependencies":[]}