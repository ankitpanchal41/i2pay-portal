{"ast":null,"code":"import { all, fork, put, takeEvery, call } from \"redux-saga/effects\";\nimport { changeConnectorMode, getConnectorData, getConnectorSettings, getEnabledConnectorData, setConnectorData, setConnectorSettingsData } from \"../services/Connector\";\nimport { GET_CONNECTOR_REQUEST, GET_CONNECTOR_RESPONSE, GET_ENABLED_CONNECTOR_REQUEST, GET_ENABLED_CONNECTOR_RESPONSE, GET_CONNECTOR_SETTINGS_RESPONSE, GET_CONNECTOR_SETTINGS_REQUEST, UPDATE_CONNECTOR_REQUEST, UPDATE_CONNECTOR_RESPONSE, UPDATE_CONNECTOR_SETTINGS_REQUEST, UPDATE_CONNECTOR_SETTINGS_RESPONSE, UPDATE_CONNECTOR_MODE_REQUEST, UPDATE_CONNECTOR_MODE_RESPONSE } from \"../actions/Connector\";\nfunction* getConnectorSaga(data) {\n  try {\n    const result = yield call(getConnectorData, data);\n    if (result.responseCode === 200) {\n      yield put({\n        type: GET_CONNECTOR_RESPONSE,\n        payload: {\n          connector: result.data,\n          paginate: result === null || result === void 0 ? void 0 : result.paginate\n        }\n      });\n    }\n  } catch (error) {} finally {\n    data === null || data === void 0 ? void 0 : data.callback();\n  }\n}\nfunction* getEnabledConnectorSaga(data) {\n  try {\n    const result = yield call(getEnabledConnectorData, data);\n    if (result.responseCode === 200) {\n      yield put({\n        type: GET_ENABLED_CONNECTOR_RESPONSE,\n        payload: {\n          enabledConnector: result.data,\n          paginate: result === null || result === void 0 ? void 0 : result.paginate\n        }\n      });\n    }\n  } catch (error) {} finally {\n    data === null || data === void 0 ? void 0 : data.callBack();\n  }\n}\nexport function* getConnectorSettingsSaga(action) {\n  try {\n    const result = yield call(getConnectorSettings, action.payload);\n    if ((result === null || result === void 0 ? void 0 : result.responseCode) === 200) {\n      yield put({\n        type: GET_CONNECTOR_SETTINGS_RESPONSE,\n        data: result === null || result === void 0 ? void 0 : result.data\n      });\n    }\n  } catch (error) {} finally {\n    action.callBack();\n  }\n}\nexport function* updateConnectorSaga(action) {\n  try {\n    const result = yield call(setConnectorData, action.payload);\n    if ((result === null || result === void 0 ? void 0 : result.responseCode) === 200) {\n      yield put({\n        type: UPDATE_CONNECTOR_RESPONSE,\n        data: result\n      });\n      action.response(result);\n    }\n  } catch (error) {} finally {\n    action.callBack();\n  }\n}\nexport function* updateConnectorSettingsSaga(action) {\n  try {\n    const result = yield call(setConnectorSettingsData, action.payload);\n    if ((result === null || result === void 0 ? void 0 : result.responseCode) === 200) {\n      yield put({\n        type: UPDATE_CONNECTOR_SETTINGS_RESPONSE,\n        data: result\n      });\n      action.navigateState();\n    }\n  } catch (error) {} finally {\n    action.callBack();\n  }\n}\nexport function* updateConnectorModeSaga(action) {\n  try {\n    const result = yield call(changeConnectorMode, action.payload);\n    if ((result === null || result === void 0 ? void 0 : result.responseCode) === 200) {\n      yield put({\n        type: UPDATE_CONNECTOR_MODE_RESPONSE,\n        data: result === null || result === void 0 ? void 0 : result.data\n      });\n    }\n  } catch (error) {} finally {\n    action.callBack();\n  }\n}\nfunction* watchConnectorSaga() {\n  yield takeEvery(GET_CONNECTOR_REQUEST, getConnectorSaga);\n  yield takeEvery(GET_ENABLED_CONNECTOR_REQUEST, getEnabledConnectorSaga);\n  yield takeEvery(GET_CONNECTOR_SETTINGS_REQUEST, getConnectorSettingsSaga);\n  yield takeEvery(UPDATE_CONNECTOR_REQUEST, updateConnectorSaga);\n  yield takeEvery(UPDATE_CONNECTOR_SETTINGS_REQUEST, updateConnectorSettingsSaga);\n  yield takeEvery(UPDATE_CONNECTOR_MODE_REQUEST, updateConnectorModeSaga);\n}\nexport default function* rootSaga() {\n  yield all([fork(watchConnectorSaga)]);\n}","map":{"version":3,"names":["all","fork","put","takeEvery","call","changeConnectorMode","getConnectorData","getConnectorSettings","getEnabledConnectorData","setConnectorData","setConnectorSettingsData","GET_CONNECTOR_REQUEST","GET_CONNECTOR_RESPONSE","GET_ENABLED_CONNECTOR_REQUEST","GET_ENABLED_CONNECTOR_RESPONSE","GET_CONNECTOR_SETTINGS_RESPONSE","GET_CONNECTOR_SETTINGS_REQUEST","UPDATE_CONNECTOR_REQUEST","UPDATE_CONNECTOR_RESPONSE","UPDATE_CONNECTOR_SETTINGS_REQUEST","UPDATE_CONNECTOR_SETTINGS_RESPONSE","UPDATE_CONNECTOR_MODE_REQUEST","UPDATE_CONNECTOR_MODE_RESPONSE","getConnectorSaga","data","result","responseCode","type","payload","connector","paginate","error","callback","getEnabledConnectorSaga","enabledConnector","callBack","getConnectorSettingsSaga","action","updateConnectorSaga","response","updateConnectorSettingsSaga","navigateState","updateConnectorModeSaga","watchConnectorSaga","rootSaga"],"sources":["/var/www/html/i2pay-portal/src/app/redux/sagas/Connector.js"],"sourcesContent":["import { all, fork, put, takeEvery, call } from \"redux-saga/effects\";\nimport {\n    changeConnectorMode,\n    getConnectorData,\n    getConnectorSettings,\n    getEnabledConnectorData,\n    setConnectorData,\n    setConnectorSettingsData,\n} from \"../services/Connector\";\nimport {\n    GET_CONNECTOR_REQUEST,\n    GET_CONNECTOR_RESPONSE,\n    GET_ENABLED_CONNECTOR_REQUEST,\n    GET_ENABLED_CONNECTOR_RESPONSE,\n    GET_CONNECTOR_SETTINGS_RESPONSE,\n    GET_CONNECTOR_SETTINGS_REQUEST,\n    UPDATE_CONNECTOR_REQUEST,\n    UPDATE_CONNECTOR_RESPONSE,\n    UPDATE_CONNECTOR_SETTINGS_REQUEST,\n    UPDATE_CONNECTOR_SETTINGS_RESPONSE,\n    UPDATE_CONNECTOR_MODE_REQUEST,\n    UPDATE_CONNECTOR_MODE_RESPONSE,\n} from \"../actions/Connector\";\n\nfunction* getConnectorSaga(data) {\n    try {\n        const result = yield call(getConnectorData, data);\n        if (result.responseCode === 200) {\n            yield put({\n                type: GET_CONNECTOR_RESPONSE,\n                payload: { connector: result.data, paginate: result?.paginate },\n            });\n        }\n    } catch (error) {\n    } finally {\n        data?.callback();\n    }\n}\n\nfunction* getEnabledConnectorSaga(data) {\n    try {\n        const result = yield call(getEnabledConnectorData, data);\n\n        if (result.responseCode === 200) {\n            yield put({\n                type: GET_ENABLED_CONNECTOR_RESPONSE,\n                payload: { enabledConnector: result.data, paginate: result?.paginate },\n            });\n        }\n    } catch (error) {\n    } finally {\n        data?.callBack();\n    }\n}\n\nexport function* getConnectorSettingsSaga(action) {\n    try {\n        const result = yield call(getConnectorSettings, action.payload);\n        if (result?.responseCode === 200) {\n            yield put({\n                type: GET_CONNECTOR_SETTINGS_RESPONSE,\n                data: result?.data,\n            });\n        }\n    } catch (error) {\n    } finally {\n        action.callBack();\n    }\n}\n\nexport function* updateConnectorSaga(action) {\n    try {\n        const result = yield call(setConnectorData, action.payload);\n        if (result?.responseCode === 200) {\n            yield put({\n                type: UPDATE_CONNECTOR_RESPONSE,\n                data: result,\n            });\n            action.response(result);\n        }\n    } catch (error) {\n    } finally {\n        action.callBack();\n    }\n}\n\nexport function* updateConnectorSettingsSaga(action) {\n    try {\n        const result = yield call(setConnectorSettingsData, action.payload);\n        if (result?.responseCode === 200) {\n            yield put({\n                type: UPDATE_CONNECTOR_SETTINGS_RESPONSE,\n                data: result,\n            });\n            action.navigateState();\n        }\n    } catch (error) {\n    } finally {\n        action.callBack();\n    }\n}\n\nexport function* updateConnectorModeSaga(action) {\n    try {\n        const result = yield call(changeConnectorMode, action.payload);\n\n        if (result?.responseCode === 200) {\n            yield put({\n                type: UPDATE_CONNECTOR_MODE_RESPONSE,\n                data: result?.data,\n            });\n        }\n    } catch (error) {\n    } finally {\n        action.callBack();\n    }\n}\n\nfunction* watchConnectorSaga() {\n    yield takeEvery(GET_CONNECTOR_REQUEST, getConnectorSaga);\n    yield takeEvery(GET_ENABLED_CONNECTOR_REQUEST, getEnabledConnectorSaga);\n    yield takeEvery(GET_CONNECTOR_SETTINGS_REQUEST, getConnectorSettingsSaga);\n    yield takeEvery(UPDATE_CONNECTOR_REQUEST, updateConnectorSaga);\n    yield takeEvery(UPDATE_CONNECTOR_SETTINGS_REQUEST, updateConnectorSettingsSaga);\n    yield takeEvery(UPDATE_CONNECTOR_MODE_REQUEST, updateConnectorModeSaga);\n}\n\nexport default function* rootSaga() {\n    yield all([fork(watchConnectorSaga)]);\n}\n"],"mappings":"AAAA,SAASA,GAAG,EAAEC,IAAI,EAAEC,GAAG,EAAEC,SAAS,EAAEC,IAAI,QAAQ,oBAAoB;AACpE,SACIC,mBAAmB,EACnBC,gBAAgB,EAChBC,oBAAoB,EACpBC,uBAAuB,EACvBC,gBAAgB,EAChBC,wBAAwB,QACrB,uBAAuB;AAC9B,SACIC,qBAAqB,EACrBC,sBAAsB,EACtBC,6BAA6B,EAC7BC,8BAA8B,EAC9BC,+BAA+B,EAC/BC,8BAA8B,EAC9BC,wBAAwB,EACxBC,yBAAyB,EACzBC,iCAAiC,EACjCC,kCAAkC,EAClCC,6BAA6B,EAC7BC,8BAA8B,QAC3B,sBAAsB;AAE7B,UAAUC,gBAAgBA,CAACC,IAAI,EAAE;EAC7B,IAAI;IACA,MAAMC,MAAM,GAAG,MAAMrB,IAAI,CAACE,gBAAgB,EAAEkB,IAAI,CAAC;IACjD,IAAIC,MAAM,CAACC,YAAY,KAAK,GAAG,EAAE;MAC7B,MAAMxB,GAAG,CAAC;QACNyB,IAAI,EAAEf,sBAAsB;QAC5BgB,OAAO,EAAE;UAAEC,SAAS,EAAEJ,MAAM,CAACD,IAAI;UAAEM,QAAQ,EAAEL,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAEK;QAAS;MAClE,CAAC,CAAC;IACN;EACJ,CAAC,CAAC,OAAOC,KAAK,EAAE,CAChB,CAAC,SAAS;IACNP,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEQ,QAAQ,CAAC,CAAC;EACpB;AACJ;AAEA,UAAUC,uBAAuBA,CAACT,IAAI,EAAE;EACpC,IAAI;IACA,MAAMC,MAAM,GAAG,MAAMrB,IAAI,CAACI,uBAAuB,EAAEgB,IAAI,CAAC;IAExD,IAAIC,MAAM,CAACC,YAAY,KAAK,GAAG,EAAE;MAC7B,MAAMxB,GAAG,CAAC;QACNyB,IAAI,EAAEb,8BAA8B;QACpCc,OAAO,EAAE;UAAEM,gBAAgB,EAAET,MAAM,CAACD,IAAI;UAAEM,QAAQ,EAAEL,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAEK;QAAS;MACzE,CAAC,CAAC;IACN;EACJ,CAAC,CAAC,OAAOC,KAAK,EAAE,CAChB,CAAC,SAAS;IACNP,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEW,QAAQ,CAAC,CAAC;EACpB;AACJ;AAEA,OAAO,UAAUC,wBAAwBA,CAACC,MAAM,EAAE;EAC9C,IAAI;IACA,MAAMZ,MAAM,GAAG,MAAMrB,IAAI,CAACG,oBAAoB,EAAE8B,MAAM,CAACT,OAAO,CAAC;IAC/D,IAAI,CAAAH,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAEC,YAAY,MAAK,GAAG,EAAE;MAC9B,MAAMxB,GAAG,CAAC;QACNyB,IAAI,EAAEZ,+BAA+B;QACrCS,IAAI,EAAEC,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAED;MAClB,CAAC,CAAC;IACN;EACJ,CAAC,CAAC,OAAOO,KAAK,EAAE,CAChB,CAAC,SAAS;IACNM,MAAM,CAACF,QAAQ,CAAC,CAAC;EACrB;AACJ;AAEA,OAAO,UAAUG,mBAAmBA,CAACD,MAAM,EAAE;EACzC,IAAI;IACA,MAAMZ,MAAM,GAAG,MAAMrB,IAAI,CAACK,gBAAgB,EAAE4B,MAAM,CAACT,OAAO,CAAC;IAC3D,IAAI,CAAAH,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAEC,YAAY,MAAK,GAAG,EAAE;MAC9B,MAAMxB,GAAG,CAAC;QACNyB,IAAI,EAAET,yBAAyB;QAC/BM,IAAI,EAAEC;MACV,CAAC,CAAC;MACFY,MAAM,CAACE,QAAQ,CAACd,MAAM,CAAC;IAC3B;EACJ,CAAC,CAAC,OAAOM,KAAK,EAAE,CAChB,CAAC,SAAS;IACNM,MAAM,CAACF,QAAQ,CAAC,CAAC;EACrB;AACJ;AAEA,OAAO,UAAUK,2BAA2BA,CAACH,MAAM,EAAE;EACjD,IAAI;IACA,MAAMZ,MAAM,GAAG,MAAMrB,IAAI,CAACM,wBAAwB,EAAE2B,MAAM,CAACT,OAAO,CAAC;IACnE,IAAI,CAAAH,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAEC,YAAY,MAAK,GAAG,EAAE;MAC9B,MAAMxB,GAAG,CAAC;QACNyB,IAAI,EAAEP,kCAAkC;QACxCI,IAAI,EAAEC;MACV,CAAC,CAAC;MACFY,MAAM,CAACI,aAAa,CAAC,CAAC;IAC1B;EACJ,CAAC,CAAC,OAAOV,KAAK,EAAE,CAChB,CAAC,SAAS;IACNM,MAAM,CAACF,QAAQ,CAAC,CAAC;EACrB;AACJ;AAEA,OAAO,UAAUO,uBAAuBA,CAACL,MAAM,EAAE;EAC7C,IAAI;IACA,MAAMZ,MAAM,GAAG,MAAMrB,IAAI,CAACC,mBAAmB,EAAEgC,MAAM,CAACT,OAAO,CAAC;IAE9D,IAAI,CAAAH,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAEC,YAAY,MAAK,GAAG,EAAE;MAC9B,MAAMxB,GAAG,CAAC;QACNyB,IAAI,EAAEL,8BAA8B;QACpCE,IAAI,EAAEC,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAED;MAClB,CAAC,CAAC;IACN;EACJ,CAAC,CAAC,OAAOO,KAAK,EAAE,CAChB,CAAC,SAAS;IACNM,MAAM,CAACF,QAAQ,CAAC,CAAC;EACrB;AACJ;AAEA,UAAUQ,kBAAkBA,CAAA,EAAG;EAC3B,MAAMxC,SAAS,CAACQ,qBAAqB,EAAEY,gBAAgB,CAAC;EACxD,MAAMpB,SAAS,CAACU,6BAA6B,EAAEoB,uBAAuB,CAAC;EACvE,MAAM9B,SAAS,CAACa,8BAA8B,EAAEoB,wBAAwB,CAAC;EACzE,MAAMjC,SAAS,CAACc,wBAAwB,EAAEqB,mBAAmB,CAAC;EAC9D,MAAMnC,SAAS,CAACgB,iCAAiC,EAAEqB,2BAA2B,CAAC;EAC/E,MAAMrC,SAAS,CAACkB,6BAA6B,EAAEqB,uBAAuB,CAAC;AAC3E;AAEA,eAAe,UAAUE,QAAQA,CAAA,EAAG;EAChC,MAAM5C,GAAG,CAAC,CAACC,IAAI,CAAC0C,kBAAkB,CAAC,CAAC,CAAC;AACzC"},"metadata":{},"sourceType":"module","externalDependencies":[]}